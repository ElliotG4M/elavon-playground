<?php
/**
 * RefundRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Gear4music\ElavonPlayground\V1\PMG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Elavon PMG (Transaction Service)
 *
 * Process transactions authorizations.
 *
 * The version of the OpenAPI document: 23.1.2-RELEASE
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gear4music\ElavonPlayground\V1\PMG\Model;

use \ArrayAccess;
use \Gear4music\ElavonPlayground\V1\PMG\ObjectSerializer;

/**
 * RefundRequest Class Doc Comment
 *
 * @category Class
 * @description Request object with required information.
 * @package  Gear4music\ElavonPlayground\V1\PMG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RefundRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RefundRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_id' => 'string',
        'merchant_id' => 'string',
        'origin_tx_id' => 'string',
        'origin_short_tx_id' => 'string',
        'merchant_refund_id' => 'string',
        'amount' => 'string',
        'system_id' => 'string',
        'currency_code' => 'string',
        'description' => 'string',
        'payload' => 'array<string,object>',
        'push_status_url' => 'string',
        'reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_id' => null,
        'merchant_id' => null,
        'origin_tx_id' => null,
        'origin_short_tx_id' => null,
        'merchant_refund_id' => null,
        'amount' => null,
        'system_id' => null,
        'currency_code' => null,
        'description' => null,
        'payload' => null,
        'push_status_url' => null,
        'reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'request_id' => false,
        'merchant_id' => false,
        'origin_tx_id' => false,
        'origin_short_tx_id' => false,
        'merchant_refund_id' => false,
        'amount' => false,
        'system_id' => false,
        'currency_code' => false,
        'description' => false,
        'payload' => false,
        'push_status_url' => false,
        'reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'requestId',
        'merchant_id' => 'merchantId',
        'origin_tx_id' => 'originTxId',
        'origin_short_tx_id' => 'originShortTxId',
        'merchant_refund_id' => 'merchantRefundId',
        'amount' => 'amount',
        'system_id' => 'systemId',
        'currency_code' => 'currencyCode',
        'description' => 'description',
        'payload' => 'payload',
        'push_status_url' => 'pushStatusUrl',
        'reason' => 'reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
        'merchant_id' => 'setMerchantId',
        'origin_tx_id' => 'setOriginTxId',
        'origin_short_tx_id' => 'setOriginShortTxId',
        'merchant_refund_id' => 'setMerchantRefundId',
        'amount' => 'setAmount',
        'system_id' => 'setSystemId',
        'currency_code' => 'setCurrencyCode',
        'description' => 'setDescription',
        'payload' => 'setPayload',
        'push_status_url' => 'setPushStatusUrl',
        'reason' => 'setReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
        'merchant_id' => 'getMerchantId',
        'origin_tx_id' => 'getOriginTxId',
        'origin_short_tx_id' => 'getOriginShortTxId',
        'merchant_refund_id' => 'getMerchantRefundId',
        'amount' => 'getAmount',
        'system_id' => 'getSystemId',
        'currency_code' => 'getCurrencyCode',
        'description' => 'getDescription',
        'payload' => 'getPayload',
        'push_status_url' => 'getPushStatusUrl',
        'reason' => 'getReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('request_id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('origin_tx_id', $data ?? [], null);
        $this->setIfExists('origin_short_tx_id', $data ?? [], null);
        $this->setIfExists('merchant_refund_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('system_id', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('payload', $data ?? [], null);
        $this->setIfExists('push_status_url', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_id'] === null) {
            $invalidProperties[] = "'request_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9-]{1,60}$/", $this->container['request_id'])) {
            $invalidProperties[] = "invalid value for 'request_id', must be conform to the pattern /^[a-zA-Z0-9-]{1,60}$/.";
        }

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9-]{1,16}$/", $this->container['merchant_id'])) {
            $invalidProperties[] = "invalid value for 'merchant_id', must be conform to the pattern /^[a-zA-Z0-9-]{1,16}$/.";
        }

        if (!is_null($this->container['origin_tx_id']) && !preg_match("/^[a-zA-Z0-9-]{1,36}$/", $this->container['origin_tx_id'])) {
            $invalidProperties[] = "invalid value for 'origin_tx_id', must be conform to the pattern /^[a-zA-Z0-9-]{1,36}$/.";
        }

        if (!is_null($this->container['origin_short_tx_id']) && !preg_match("/\\d{8,9}/", $this->container['origin_short_tx_id'])) {
            $invalidProperties[] = "invalid value for 'origin_short_tx_id', must be conform to the pattern /\\d{8,9}/.";
        }

        if ($this->container['merchant_refund_id'] === null) {
            $invalidProperties[] = "'merchant_refund_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9-]{1,30}$/", $this->container['merchant_refund_id'])) {
            $invalidProperties[] = "invalid value for 'merchant_refund_id', must be conform to the pattern /^[a-zA-Z0-9-]{1,30}$/.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (!preg_match("/^[1-9][0-9]{0,9}$/", $this->container['amount'])) {
            $invalidProperties[] = "invalid value for 'amount', must be conform to the pattern /^[1-9][0-9]{0,9}$/.";
        }

        if ($this->container['system_id'] === null) {
            $invalidProperties[] = "'system_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9-]{1,60}$/", $this->container['system_id'])) {
            $invalidProperties[] = "invalid value for 'system_id', must be conform to the pattern /^[a-zA-Z0-9-]{1,60}$/.";
        }

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if (!preg_match("/^[A-Z][A-Z][A-Z]$/", $this->container['currency_code'])) {
            $invalidProperties[] = "invalid value for 'currency_code', must be conform to the pattern /^[A-Z][A-Z][A-Z]$/.";
        }

        if (!is_null($this->container['description']) && !preg_match("/^[^<>{}]{0,255}$/", $this->container['description'])) {
            $invalidProperties[] = "invalid value for 'description', must be conform to the pattern /^[^<>{}]{0,255}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id Any Random String/Number generated by the caller. Used for tracing purposes.
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        if (is_null($request_id)) {
            throw new \InvalidArgumentException('non-nullable request_id cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9-]{1,60}$/", ObjectSerializer::toString($request_id)))) {
            throw new \InvalidArgumentException("invalid value for \$request_id when calling RefundRequest., must conform to the pattern /^[a-zA-Z0-9-]{1,60}$/.");
        }

        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id Merchant ID.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9-]{1,16}$/", ObjectSerializer::toString($merchant_id)))) {
            throw new \InvalidArgumentException("invalid value for \$merchant_id when calling RefundRequest., must conform to the pattern /^[a-zA-Z0-9-]{1,16}$/.");
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets origin_tx_id
     *
     * @return string|null
     */
    public function getOriginTxId()
    {
        return $this->container['origin_tx_id'];
    }

    /**
     * Sets origin_tx_id
     *
     * @param string|null $origin_tx_id ID of the original transaction(authorization), provided by PMG.
     *
     * @return self
     */
    public function setOriginTxId($origin_tx_id)
    {
        if (is_null($origin_tx_id)) {
            throw new \InvalidArgumentException('non-nullable origin_tx_id cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9-]{1,36}$/", ObjectSerializer::toString($origin_tx_id)))) {
            throw new \InvalidArgumentException("invalid value for \$origin_tx_id when calling RefundRequest., must conform to the pattern /^[a-zA-Z0-9-]{1,36}$/.");
        }

        $this->container['origin_tx_id'] = $origin_tx_id;

        return $this;
    }

    /**
     * Gets origin_short_tx_id
     *
     * @return string|null
     */
    public function getOriginShortTxId()
    {
        return $this->container['origin_short_tx_id'];
    }

    /**
     * Sets origin_short_tx_id
     *
     * @param string|null $origin_short_tx_id Short ID of the original transaction (authorization), provided by PMG (8 or 9 numbers).
     *
     * @return self
     */
    public function setOriginShortTxId($origin_short_tx_id)
    {
        if (is_null($origin_short_tx_id)) {
            throw new \InvalidArgumentException('non-nullable origin_short_tx_id cannot be null');
        }

        if ((!preg_match("/\\d{8,9}/", ObjectSerializer::toString($origin_short_tx_id)))) {
            throw new \InvalidArgumentException("invalid value for \$origin_short_tx_id when calling RefundRequest., must conform to the pattern /\\d{8,9}/.");
        }

        $this->container['origin_short_tx_id'] = $origin_short_tx_id;

        return $this;
    }

    /**
     * Gets merchant_refund_id
     *
     * @return string
     */
    public function getMerchantRefundId()
    {
        return $this->container['merchant_refund_id'];
    }

    /**
     * Sets merchant_refund_id
     *
     * @param string $merchant_refund_id Short ID of the original transaction(authorization), provided by PMG.
     *
     * @return self
     */
    public function setMerchantRefundId($merchant_refund_id)
    {
        if (is_null($merchant_refund_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_refund_id cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9-]{1,30}$/", ObjectSerializer::toString($merchant_refund_id)))) {
            throw new \InvalidArgumentException("invalid value for \$merchant_refund_id when calling RefundRequest., must conform to the pattern /^[a-zA-Z0-9-]{1,30}$/.");
        }

        $this->container['merchant_refund_id'] = $merchant_refund_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount The amount to refund in currency's smallest re-presentable unit (e.g cents). No decimal placeholder.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if ((!preg_match("/^[1-9][0-9]{0,9}$/", ObjectSerializer::toString($amount)))) {
            throw new \InvalidArgumentException("invalid value for \$amount when calling RefundRequest., must conform to the pattern /^[1-9][0-9]{0,9}$/.");
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets system_id
     *
     * @return string
     */
    public function getSystemId()
    {
        return $this->container['system_id'];
    }

    /**
     * Sets system_id
     *
     * @param string $system_id Terminal ID when payment is originated from terminal. System id when payment originated from ecommerce.
     *
     * @return self
     */
    public function setSystemId($system_id)
    {
        if (is_null($system_id)) {
            throw new \InvalidArgumentException('non-nullable system_id cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9-]{1,60}$/", ObjectSerializer::toString($system_id)))) {
            throw new \InvalidArgumentException("invalid value for \$system_id when calling RefundRequest., must conform to the pattern /^[a-zA-Z0-9-]{1,60}$/.");
        }

        $this->container['system_id'] = $system_id;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code 3 letter ISO currency code of the transaction.
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }

        if ((!preg_match("/^[A-Z][A-Z][A-Z]$/", ObjectSerializer::toString($currency_code)))) {
            throw new \InvalidArgumentException("invalid value for \$currency_code when calling RefundRequest., must conform to the pattern /^[A-Z][A-Z][A-Z]$/.");
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the refund. Depending on payment or refund method, the actual outcome on the consumer’s statement varies, for instance the set of allowed characters or maximum length. The text resulting from your input value is automatically stripped of white space and truncated if it exceeds the maximum length. We may adapt the text if required e.g. for reconciliation purposes.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        if ((!preg_match("/^[^<>{}]{0,255}$/", ObjectSerializer::toString($description)))) {
            throw new \InvalidArgumentException("invalid value for \$description when calling RefundRequest., must conform to the pattern /^[^<>{}]{0,255}$/.");
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets payload
     *
     * @return array<string,object>|null
     */
    public function getPayload()
    {
        return $this->container['payload'];
    }

    /**
     * Sets payload
     *
     * @param array<string,object>|null $payload Reserved map for addition information to be passed. In general to be used to transfer payment method specific data.
     *
     * @return self
     */
    public function setPayload($payload)
    {
        if (is_null($payload)) {
            throw new \InvalidArgumentException('non-nullable payload cannot be null');
        }
        $this->container['payload'] = $payload;

        return $this;
    }

    /**
     * Gets push_status_url
     *
     * @return string|null
     */
    public function getPushStatusUrl()
    {
        return $this->container['push_status_url'];
    }

    /**
     * Sets push_status_url
     *
     * @param string|null $push_status_url This property is used for rest notification when refund status has been changed.
     *
     * @return self
     */
    public function setPushStatusUrl($push_status_url)
    {
        if (is_null($push_status_url)) {
            throw new \InvalidArgumentException('non-nullable push_status_url cannot be null');
        }
        $this->container['push_status_url'] = $push_status_url;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Reason for the refund:  TIMEOUT - the original transaction response timed out. Client initiated refund; ERROR - terminal/portal is unable to obtain the status of original transaction due to unknown error; USER - refund was requested by user.
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


