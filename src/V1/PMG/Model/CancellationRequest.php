<?php
/**
 * CancellationRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Gear4music\ElavonPlayground\V1\PMG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Elavon PMG (Transaction Service)
 *
 * Process transactions authorizations.
 *
 * The version of the OpenAPI document: 23.1.2-RELEASE
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Gear4music\ElavonPlayground\V1\PMG\Model;

use \ArrayAccess;
use \Gear4music\ElavonPlayground\V1\PMG\ObjectSerializer;

/**
 * CancellationRequest Class Doc Comment
 *
 * @category Class
 * @description Cancellation request object.
 * @package  Gear4music\ElavonPlayground\V1\PMG
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CancellationRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CancellationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_id' => 'string',
        'system_id' => 'string',
        'merchant_id' => 'string',
        'merchant_cxl_id' => 'string',
        'origin_tx_id' => 'string',
        'origin_short_tx_id' => 'string',
        'transaction_type' => 'string',
        'reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_id' => null,
        'system_id' => null,
        'merchant_id' => null,
        'merchant_cxl_id' => null,
        'origin_tx_id' => null,
        'origin_short_tx_id' => null,
        'transaction_type' => null,
        'reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'requestId',
        'system_id' => 'systemId',
        'merchant_id' => 'merchantId',
        'merchant_cxl_id' => 'merchantCxlId',
        'origin_tx_id' => 'originTxId',
        'origin_short_tx_id' => 'originShortTxId',
        'transaction_type' => 'transactionType',
        'reason' => 'reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
        'system_id' => 'setSystemId',
        'merchant_id' => 'setMerchantId',
        'merchant_cxl_id' => 'setMerchantCxlId',
        'origin_tx_id' => 'setOriginTxId',
        'origin_short_tx_id' => 'setOriginShortTxId',
        'transaction_type' => 'setTransactionType',
        'reason' => 'setReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
        'system_id' => 'getSystemId',
        'merchant_id' => 'getMerchantId',
        'merchant_cxl_id' => 'getMerchantCxlId',
        'origin_tx_id' => 'getOriginTxId',
        'origin_short_tx_id' => 'getOriginShortTxId',
        'transaction_type' => 'getTransactionType',
        'reason' => 'getReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_id'] = $data['request_id'] ?? null;
        $this->container['system_id'] = $data['system_id'] ?? null;
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['merchant_cxl_id'] = $data['merchant_cxl_id'] ?? null;
        $this->container['origin_tx_id'] = $data['origin_tx_id'] ?? null;
        $this->container['origin_short_tx_id'] = $data['origin_short_tx_id'] ?? null;
        $this->container['transaction_type'] = $data['transaction_type'] ?? null;
        $this->container['reason'] = $data['reason'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_id'] === null) {
            $invalidProperties[] = "'request_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9-]{1,60}$/", $this->container['request_id'])) {
            $invalidProperties[] = "invalid value for 'request_id', must be conform to the pattern /^[a-zA-Z0-9-]{1,60}$/.";
        }

        if ($this->container['system_id'] === null) {
            $invalidProperties[] = "'system_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9-]{1,60}$/", $this->container['system_id'])) {
            $invalidProperties[] = "invalid value for 'system_id', must be conform to the pattern /^[a-zA-Z0-9-]{1,60}$/.";
        }

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9-]{1,16}$/", $this->container['merchant_id'])) {
            $invalidProperties[] = "invalid value for 'merchant_id', must be conform to the pattern /^[a-zA-Z0-9-]{1,16}$/.";
        }

        if ($this->container['merchant_cxl_id'] === null) {
            $invalidProperties[] = "'merchant_cxl_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z\\d-]{1,30}$/", $this->container['merchant_cxl_id'])) {
            $invalidProperties[] = "invalid value for 'merchant_cxl_id', must be conform to the pattern /^[a-zA-Z\\d-]{1,30}$/.";
        }

        if ($this->container['origin_tx_id'] === null) {
            $invalidProperties[] = "'origin_tx_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9-]{1,36}$/", $this->container['origin_tx_id'])) {
            $invalidProperties[] = "invalid value for 'origin_tx_id', must be conform to the pattern /^[a-zA-Z0-9-]{1,36}$/.";
        }

        if (!is_null($this->container['origin_short_tx_id']) && !preg_match("/\\d{8,9}/", $this->container['origin_short_tx_id'])) {
            $invalidProperties[] = "invalid value for 'origin_short_tx_id', must be conform to the pattern /\\d{8,9}/.";
        }

        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id Any Random String/Number generated by the caller. Used for tracing purposes.
     *
     * @return self
     */
    public function setRequestId($request_id)
    {

        if ((!preg_match("/^[a-zA-Z0-9-]{1,60}$/", $request_id))) {
            throw new \InvalidArgumentException("invalid value for $request_id when calling CancellationRequest., must conform to the pattern /^[a-zA-Z0-9-]{1,60}$/.");
        }

        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets system_id
     *
     * @return string
     */
    public function getSystemId()
    {
        return $this->container['system_id'];
    }

    /**
     * Sets system_id
     *
     * @param string $system_id Terminal ID when payment is originated from terminal. System id when payment originated from ecommerce.
     *
     * @return self
     */
    public function setSystemId($system_id)
    {

        if ((!preg_match("/^[a-zA-Z0-9-]{1,60}$/", $system_id))) {
            throw new \InvalidArgumentException("invalid value for $system_id when calling CancellationRequest., must conform to the pattern /^[a-zA-Z0-9-]{1,60}$/.");
        }

        $this->container['system_id'] = $system_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id Merchant ID.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {

        if ((!preg_match("/^[a-zA-Z0-9-]{1,16}$/", $merchant_id))) {
            throw new \InvalidArgumentException("invalid value for $merchant_id when calling CancellationRequest., must conform to the pattern /^[a-zA-Z0-9-]{1,16}$/.");
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets merchant_cxl_id
     *
     * @return string
     */
    public function getMerchantCxlId()
    {
        return $this->container['merchant_cxl_id'];
    }

    /**
     * Sets merchant_cxl_id
     *
     * @param string $merchant_cxl_id Client's cancellation identifier(Generated by ecommerce third party provider or Terminal).
     *
     * @return self
     */
    public function setMerchantCxlId($merchant_cxl_id)
    {

        if ((!preg_match("/^[a-zA-Z\\d-]{1,30}$/", $merchant_cxl_id))) {
            throw new \InvalidArgumentException("invalid value for $merchant_cxl_id when calling CancellationRequest., must conform to the pattern /^[a-zA-Z\\d-]{1,30}$/.");
        }

        $this->container['merchant_cxl_id'] = $merchant_cxl_id;

        return $this;
    }

    /**
     * Gets origin_tx_id
     *
     * @return string
     */
    public function getOriginTxId()
    {
        return $this->container['origin_tx_id'];
    }

    /**
     * Sets origin_tx_id
     *
     * @param string $origin_tx_id ID of the original transaction(authorization), provided by PMG.
     *
     * @return self
     */
    public function setOriginTxId($origin_tx_id)
    {

        if ((!preg_match("/^[a-zA-Z0-9-]{1,36}$/", $origin_tx_id))) {
            throw new \InvalidArgumentException("invalid value for $origin_tx_id when calling CancellationRequest., must conform to the pattern /^[a-zA-Z0-9-]{1,36}$/.");
        }

        $this->container['origin_tx_id'] = $origin_tx_id;

        return $this;
    }

    /**
     * Gets origin_short_tx_id
     *
     * @return string|null
     */
    public function getOriginShortTxId()
    {
        return $this->container['origin_short_tx_id'];
    }

    /**
     * Sets origin_short_tx_id
     *
     * @param string|null $origin_short_tx_id Short ID of the original transaction (authorization), provided by PMG (8 or 9 numbers).
     *
     * @return self
     */
    public function setOriginShortTxId($origin_short_tx_id)
    {

        if (!is_null($origin_short_tx_id) && (!preg_match("/\\d{8,9}/", $origin_short_tx_id))) {
            throw new \InvalidArgumentException("invalid value for $origin_short_tx_id when calling CancellationRequest., must conform to the pattern /\\d{8,9}/.");
        }

        $this->container['origin_short_tx_id'] = $origin_short_tx_id;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type \"POS_PURCHASE\" or \"POS_RETURN\".
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Reason for the cancellation:  TIMEOUT - the original transaction response timed out. Client initiated refund; ERROR - terminal/portal is unable to obtain the status of original transaction due to unknown error; USER - refund was requested by user.
     *
     * @return self
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


