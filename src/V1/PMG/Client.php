<?php

declare(strict_types=1);

namespace Gear4music\ElavonPlayground\V1\PMG;

use Gear4music\ElavonPlayground\V1\PMG\ElavonPlayground\TransactionAuthorizationEndpointApi;
use Gear4music\ElavonPlayground\V1\PMG\ElavonPlayground\TransactionEndpointsForAuthorizationAndStatusCheckApi;
use Gear4music\ElavonPlayground\V1\PMG\Model\AuthorizationRequest;
use Gear4music\ElavonPlayground\V1\PMG\Model\AuthorizationResponse;
use Gear4music\ElavonPlayground\V1\PMG\Model\CancellationResponse;
use Gear4music\ElavonPlayground\V1\PMG\Model\ErrorResponse;
use Gear4music\ElavonPlayground\V1\PMG\Model\GetTransactionStatusRequest;
use Gear4music\ElavonPlayground\V1\PMG\Model\GetTransactionStatusResponse;

class Client
{
    private TransactionAuthorizationEndpointApi $transactionAuthorizationApi;

    private TransactionEndpointsForAuthorizationAndStatusCheckApi $transactionStatusApi;

    public function __construct(string $host, string $merchantID, string $secretKey)
    {
        $this->transactionAuthorizationApi = new TransactionAuthorizationEndpointApi(
            new \GuzzleHttp\Client(),
            Configuration::getDefaultConfiguration()
                ->setUsername($merchantID)
                ->setPassword($secretKey)
                ->setHost($host)
        );
        $this->transactionStatusApi = new TransactionEndpointsForAuthorizationAndStatusCheckApi(
            new \GuzzleHttp\Client(),
            Configuration::getDefaultConfiguration()
                ->setUsername($merchantID)
                ->setPassword($secretKey)
                ->setHost($host)
        );
    }

    /**
     * @param string $requestId
     * @param string $merchantId
     * @param string $merchantTransactionId
     * @param string $paymentMethod
     * @param int $amount
     * @param string $currencyCode
     * @param string $countryCode
     * @param string $shopperName
     * @param string $languageCode
     * @param string $redirectUrl
     * @param string $systemId
     * @param string $pushStatusUrl
     * @return AuthorizationResponse
     * @throws \Exception
     */
    public function createTransaction(
        string $requestId, // Any generated (by us) unique string
        string $merchantId,
        string $merchantTransactionId, // Client's Transaction identifier (Generated by us)
        string $paymentMethod, // 'ideal' or 'p24' (or any other method listed here https://developer.elavon.com/products/uk/payment-method-gateway/v1/supported-payment-methods--transaction-types)
        int $amount, // amount is in pence/cents
        string $currencyCode, // ISO3
        string $countryCode, // ISO2
        string $shopperName, // Name of company - Use trading brand
        string $languageCode, // ISO2 of customer's chosen language
        string $redirectUrl, // redirect url once payment is completed
        string $systemId, // todo what is this? Our Processor ID?
        string $pushStatusUrl // todo is this a webhook URL to push transaction status updates to us?
    ): AuthorizationResponse
    {
        //
        $payload = [
            "shopperEmail" => "test@test.com",
            "key1" => "value1",
            "key2" => "value2"
        ];

        $request = new AuthorizationRequest([
            'request_id' => $requestId,
            'merchant_id' => $merchantId,
            'merchant_tx_id' => $merchantTransactionId,
            'payment_method' => $paymentMethod,
            'amount' => $amount,
            'currency_code' => $currencyCode,
            'country_code' => $countryCode,
            'shopper_name' => $shopperName,
            'language_code' => $languageCode,
            'shopper_type' => 'E_COMMERCE',
            'redirect_url' => $redirectUrl,
            'system_id' => $systemId,
            'push_status_url' => $pushStatusUrl,
            'payload' => $payload
        ]);
        $response = $this->transactionAuthorizationApi->authorizeTransaction($request);
        if ($response instanceof ErrorResponse) {
            throw new \Exception($response->getMessage(), $response->getHttpStatus());
        } else if ($response instanceof CancellationResponse) {
            throw new \Exception('Unexpected cancellation response', 500);
        } else {
            return $response;
        }
    }

    public function getTransaction(
        string $merchantId,
        string $transactionId
    ): GetTransactionStatusResponse
    {
        $request = new GetTransactionStatusRequest([
            'merchant_id' => $merchantId,
            'tx_id' => $transactionId
        ]);
        return $this->transactionStatusApi->getTransactionStatus($merchantId, $request, $transactionId);
    }
}